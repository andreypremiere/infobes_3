{"ast":null,"code":"/* global BigInt */\n\nimport { prime } from 'bigint-crypto-utils';\nexport async function generateLargePrime(bits = 512) {\n  const largePrime = await prime(bits);\n  return largePrime;\n}\n\n// Функция для быстрого возведения в степень по модулю с использованием BigInt\nfunction modPow(base, exp, mod) {\n  let result = BigInt(1);\n  base = base % mod;\n  while (exp > 0) {\n    if (exp % 2n === 1n) {\n      result = result * base % mod;\n    }\n    base = base * base % mod;\n    exp /= 2n;\n  }\n  return result;\n}\n\n// Функция для вычисления примитивного корня g по модулю p\nexport async function findPrimitiveRoot(p) {\n  const pMinusOne = p - 1n;\n\n  // Получаем все простые делители p-1\n  const factors = getPrimeFactors(pMinusOne);\n  for (let g = 2n; g < p; g++) {\n    let isPrimitive = true;\n\n    // Проверка, является ли g примитивным корнем\n    for (let i = 0; i < factors.length; i++) {\n      const factor = factors[i];\n      if (modPow(g, pMinusOne / factor, p) === 1n) {\n        isPrimitive = false;\n        break;\n      }\n    }\n    if (isPrimitive) {\n      return g;\n    }\n  }\n  return null; // Если примитивный корень не найден\n}\n\n// Функция для получения простых делителей числа\nfunction getPrimeFactors(n) {\n  let factors = [];\n  let i = 2n;\n  while (i * i <= n) {\n    while (n % i === 0n) {\n      factors.push(i);\n      n /= i;\n    }\n    i += 1n;\n  }\n  if (n > 1n) {\n    factors.push(n);\n  }\n  return factors;\n}","map":{"version":3,"names":["prime","generateLargePrime","bits","largePrime","modPow","base","exp","mod","result","BigInt","findPrimitiveRoot","p","pMinusOne","factors","getPrimeFactors","g","isPrimitive","i","length","factor","n","push"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/generatingNumberTools.js"],"sourcesContent":["/* global BigInt */\r\n\r\nimport { prime } from 'bigint-crypto-utils';\r\n\r\n\r\nexport async function generateLargePrime(bits = 512) {\r\n  const largePrime = await prime(bits);\r\n  return largePrime;\r\n}\r\n\r\n// Функция для быстрого возведения в степень по модулю с использованием BigInt\r\nfunction modPow(base, exp, mod) {\r\n    let result = BigInt(1);\r\n    base = base % mod;\r\n    while (exp > 0) {\r\n      if (exp % 2n === 1n) {\r\n        result = (result * base) % mod;\r\n      }\r\n      base = (base * base) % mod;\r\n      exp /= 2n;\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  // Функция для вычисления примитивного корня g по модулю p\r\n  export async function findPrimitiveRoot(p) {\r\n    const pMinusOne = p - 1n;\r\n  \r\n    // Получаем все простые делители p-1\r\n    const factors = getPrimeFactors(pMinusOne);\r\n  \r\n    for (let g = 2n; g < p; g++) {\r\n      let isPrimitive = true;\r\n  \r\n      // Проверка, является ли g примитивным корнем\r\n      for (let i = 0; i < factors.length; i++) {\r\n        const factor = factors[i];\r\n        if (modPow(g, pMinusOne / factor, p) === 1n) {\r\n          isPrimitive = false;\r\n          break;\r\n        }\r\n      }\r\n  \r\n      if (isPrimitive) {\r\n        return g;\r\n      }\r\n    }\r\n  \r\n    return null; // Если примитивный корень не найден\r\n  }\r\n  \r\n  // Функция для получения простых делителей числа\r\n  function getPrimeFactors(n) {\r\n    let factors = [];\r\n    let i = 2n;\r\n    while (i * i <= n) {\r\n      while (n % i === 0n) {\r\n        factors.push(i);\r\n        n /= i;\r\n      }\r\n      i += 1n;\r\n    }\r\n    if (n > 1n) {\r\n      factors.push(n);\r\n    }\r\n    return factors;\r\n  }"],"mappings":"AAAA;;AAEA,SAASA,KAAK,QAAQ,qBAAqB;AAG3C,OAAO,eAAeC,kBAAkBA,CAACC,IAAI,GAAG,GAAG,EAAE;EACnD,MAAMC,UAAU,GAAG,MAAMH,KAAK,CAACE,IAAI,CAAC;EACpC,OAAOC,UAAU;AACnB;;AAEA;AACA,SAASC,MAAMA,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC5B,IAAIC,MAAM,GAAGC,MAAM,CAAC,CAAC,CAAC;EACtBJ,IAAI,GAAGA,IAAI,GAAGE,GAAG;EACjB,OAAOD,GAAG,GAAG,CAAC,EAAE;IACd,IAAIA,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;MACnBE,MAAM,GAAIA,MAAM,GAAGH,IAAI,GAAIE,GAAG;IAChC;IACAF,IAAI,GAAIA,IAAI,GAAGA,IAAI,GAAIE,GAAG;IAC1BD,GAAG,IAAI,EAAE;EACX;EACA,OAAOE,MAAM;AACf;;AAEA;AACA,OAAO,eAAeE,iBAAiBA,CAACC,CAAC,EAAE;EACzC,MAAMC,SAAS,GAAGD,CAAC,GAAG,EAAE;;EAExB;EACA,MAAME,OAAO,GAAGC,eAAe,CAACF,SAAS,CAAC;EAE1C,KAAK,IAAIG,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAGJ,CAAC,EAAEI,CAAC,EAAE,EAAE;IAC3B,IAAIC,WAAW,GAAG,IAAI;;IAEtB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAME,MAAM,GAAGN,OAAO,CAACI,CAAC,CAAC;MACzB,IAAIb,MAAM,CAACW,CAAC,EAAEH,SAAS,GAAGO,MAAM,EAAER,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3CK,WAAW,GAAG,KAAK;QACnB;MACF;IACF;IAEA,IAAIA,WAAW,EAAE;MACf,OAAOD,CAAC;IACV;EACF;EAEA,OAAO,IAAI,CAAC,CAAC;AACf;;AAEA;AACA,SAASD,eAAeA,CAACM,CAAC,EAAE;EAC1B,IAAIP,OAAO,GAAG,EAAE;EAChB,IAAII,CAAC,GAAG,EAAE;EACV,OAAOA,CAAC,GAAGA,CAAC,IAAIG,CAAC,EAAE;IACjB,OAAOA,CAAC,GAAGH,CAAC,KAAK,EAAE,EAAE;MACnBJ,OAAO,CAACQ,IAAI,CAACJ,CAAC,CAAC;MACfG,CAAC,IAAIH,CAAC;IACR;IACAA,CAAC,IAAI,EAAE;EACT;EACA,IAAIG,CAAC,GAAG,EAAE,EAAE;IACVP,OAAO,CAACQ,IAAI,CAACD,CAAC,CAAC;EACjB;EACA,OAAOP,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}