{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0443\\u0447\\u0435\\u0431\\u0430\\\\3 \\u043A\\u0443\\u0440\\u0441\\\\1 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\\\u0418\\u043D\\u0444\\u043E\\u0411\\u0435\\u0437\\\\pracitce_3\\\\practice_3_ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n// import About from './about/About';\n// import Home from './home/Home';\n// import DiffieHellmanExchange from './DiffieHellmanExchange';\nimport { decryptMessage } from './cryptMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Ответ от сервера:', data);\n\n        // Пример расшифровки (если у вас есть функция decryptMessage)\n        const decryptedData = decryptMessage(data.shared_key, data.iv, data.encrypted_message);\n        console.log('Расшифрованные данные:', decryptedData);\n      } catch (error) {\n        console.error('Ошибка при запросе:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u041A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0441\\u043A\\u0430\\u044F \\u0441\\u0442\\u043E\\u0440\\u043E\\u043D\\u0430\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 8\n  }, this);\n  // return (\n  //   <BrowserRouter>\n  //     <Routes>\n  //       <Route path=\"/\" element={<Home />} />\n  //       <Route path=\"/about\" element={<About />} />\n  //     </Routes>\n  //   </BrowserRouter>\n  // );\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Routes","Route","decryptMessage","jsxDEV","_jsxDEV","App","_s","useEffect","fetchData","response","fetch","method","headers","ok","Error","status","data","json","console","log","decryptedData","shared_key","iv","encrypted_message","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/App.js"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n// import About from './about/About';\n// import Home from './home/Home';\n// import DiffieHellmanExchange from './DiffieHellmanExchange';\nimport { decryptMessage } from './cryptMessage';\n\n\nfunction App() {\n  useEffect(() => {\n    const fetchData = async () => {\n        try {\n            const response = await fetch('http://127.0.0.1:5000/', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log('Ответ от сервера:', data);\n\n            // Пример расшифровки (если у вас есть функция decryptMessage)\n            const decryptedData = decryptMessage(\n                data.shared_key,\n                data.iv,\n                data.encrypted_message\n            );\n\n            console.log('Расшифрованные данные:', decryptedData);\n        } catch (error) {\n            console.error('Ошибка при запросе:', error);\n        }\n    };\n\n    fetchData();\n}, []);\n\nreturn <div>Клиентская сторона</div>;\n  // return (\n  //   <BrowserRouter>\n  //     <Routes>\n  //       <Route path=\"/\" element={<Home />} />\n  //       <Route path=\"/about\" element={<About />} />\n  //     </Routes>\n  //   </BrowserRouter>\n  // );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC/D;AACA;AACA;AACA,SAASC,cAAc,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACbC,SAAS,CAAC,MAAM;IACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;UACnDC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC;QAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;QAC7D;QAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;;QAEtC;QACA,MAAMI,aAAa,GAAGlB,cAAc,CAChCc,IAAI,CAACK,UAAU,EACfL,IAAI,CAACM,EAAE,EACPN,IAAI,CAACO,iBACT,CAAC;QAEDL,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,aAAa,CAAC;MACxD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC/C;IACJ,CAAC;IAEDhB,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOJ,OAAA;IAAAqB,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAClC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACvB,EAAA,CA3CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}