{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// Функция для расшифровки сообщения\nexport function decryptMessage(sharedKeyBase64, ivBase64, encryptedMessageBase64) {\n  // Преобразуем ключ, IV и зашифрованное сообщение из base64\n  const sharedKey = CryptoJS.enc.Base64.parse(sharedKeyBase64);\n  const iv = CryptoJS.enc.Base64.parse(ivBase64);\n  const encryptedMessage = CryptoJS.enc.Base64.parse(encryptedMessageBase64);\n\n  // Расшифровка с использованием AES-CBC\n  const decrypted = CryptoJS.AES.decrypt({\n    ciphertext: encryptedMessage\n  }, sharedKey, {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n\n  // Преобразование обратно в строку\n  const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n  return JSON.parse(plaintext); // Парсим JSON, если сообщение было сериализовано\n}","map":{"version":3,"names":["CryptoJS","decryptMessage","sharedKeyBase64","ivBase64","encryptedMessageBase64","sharedKey","enc","Base64","parse","iv","encryptedMessage","decrypted","AES","decrypt","ciphertext","mode","CBC","padding","pad","Pkcs7","plaintext","toString","Utf8","JSON"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/cryptMessage.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\n// Функция для расшифровки сообщения\r\nexport function decryptMessage(sharedKeyBase64, ivBase64, encryptedMessageBase64) {\r\n    // Преобразуем ключ, IV и зашифрованное сообщение из base64\r\n    const sharedKey = CryptoJS.enc.Base64.parse(sharedKeyBase64);\r\n    const iv = CryptoJS.enc.Base64.parse(ivBase64);\r\n    const encryptedMessage = CryptoJS.enc.Base64.parse(encryptedMessageBase64);\r\n\r\n    // Расшифровка с использованием AES-CBC\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        { ciphertext: encryptedMessage },\r\n        sharedKey,\r\n        {\r\n            iv: iv,\r\n            mode: CryptoJS.mode.CBC,\r\n            padding: CryptoJS.pad.Pkcs7,\r\n        }\r\n    );\r\n\r\n    // Преобразование обратно в строку\r\n    const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n    return JSON.parse(plaintext); // Парсим JSON, если сообщение было сериализовано\r\n}\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,OAAO,SAASC,cAAcA,CAACC,eAAe,EAAEC,QAAQ,EAAEC,sBAAsB,EAAE;EAC9E;EACA,MAAMC,SAAS,GAAGL,QAAQ,CAACM,GAAG,CAACC,MAAM,CAACC,KAAK,CAACN,eAAe,CAAC;EAC5D,MAAMO,EAAE,GAAGT,QAAQ,CAACM,GAAG,CAACC,MAAM,CAACC,KAAK,CAACL,QAAQ,CAAC;EAC9C,MAAMO,gBAAgB,GAAGV,QAAQ,CAACM,GAAG,CAACC,MAAM,CAACC,KAAK,CAACJ,sBAAsB,CAAC;;EAE1E;EACA,MAAMO,SAAS,GAAGX,QAAQ,CAACY,GAAG,CAACC,OAAO,CAClC;IAAEC,UAAU,EAAEJ;EAAiB,CAAC,EAChCL,SAAS,EACT;IACII,EAAE,EAAEA,EAAE;IACNM,IAAI,EAAEf,QAAQ,CAACe,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAEjB,QAAQ,CAACkB,GAAG,CAACC;EAC1B,CACJ,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGT,SAAS,CAACU,QAAQ,CAACrB,QAAQ,CAACM,GAAG,CAACgB,IAAI,CAAC;EACvD,OAAOC,IAAI,CAACf,KAAK,CAACY,SAAS,CAAC,CAAC,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}