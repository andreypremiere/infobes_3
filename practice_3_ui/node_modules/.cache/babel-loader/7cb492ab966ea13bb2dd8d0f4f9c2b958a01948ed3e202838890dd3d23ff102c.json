{"ast":null,"code":"// Генерация параметров Diffie-Hellman (используем ECDH с кривой P-256)\nexport async function generateDhParameters() {\n  const algorithm = {\n    name: 'ECDH',\n    // Диффи-Хеллман с эллиптической кривой\n    namedCurve: 'P-256' // Используем кривую P-256\n  };\n\n  // Генерация пары ключей (приватный и публичный ключ)\n  const keyPair = await window.crypto.subtle.generateKey(algorithm, true, ['deriveKey', 'deriveBits']);\n\n  // Экспортируем публичный ключ в формат, который можно передать\n  const publicKey = await window.crypto.subtle.exportKey('spki', keyPair.publicKey);\n  return {\n    keyPair,\n    publicKey\n  }; // Возвращаем пару ключей и публичный ключ\n}\n\n// Вычисление общего ключа на основе публичного ключа клиента\nexport async function computeSharedKey(privateKey, clientPublicKeyBuffer) {\n  const algorithm = {\n    name: 'ECDH',\n    namedCurve: 'P-256'\n  };\n\n  // Импортируем публичный ключ клиента из полученного буфера\n  const clientPublicKey = await window.crypto.subtle.importKey('spki', clientPublicKeyBuffer, algorithm, false, []);\n\n  // Используем приватный ключ сервера и публичный ключ клиента для вычисления общего ключа\n  const sharedKey = await window.crypto.subtle.deriveKey(algorithm, privateKey, clientPublicKey, true,\n  // Экспортируем общий ключ\n  ['encrypt', 'decrypt'] // Указываем, что ключ будет использоваться для шифрования и расшифровки\n  );\n  return sharedKey; // Возвращаем общий ключ\n}","map":{"version":3,"names":["generateDhParameters","algorithm","name","namedCurve","keyPair","window","crypto","subtle","generateKey","publicKey","exportKey","computeSharedKey","privateKey","clientPublicKeyBuffer","clientPublicKey","importKey","sharedKey","deriveKey"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/diffieUtils.js"],"sourcesContent":["\r\n// Генерация параметров Diffie-Hellman (используем ECDH с кривой P-256)\r\nexport async function generateDhParameters() {\r\n    const algorithm = {\r\n      name: 'ECDH', // Диффи-Хеллман с эллиптической кривой\r\n      namedCurve: 'P-256', // Используем кривую P-256\r\n    };\r\n  \r\n    // Генерация пары ключей (приватный и публичный ключ)\r\n    const keyPair = await window.crypto.subtle.generateKey(algorithm, true, ['deriveKey', 'deriveBits']);\r\n    \r\n    // Экспортируем публичный ключ в формат, который можно передать\r\n    const publicKey = await window.crypto.subtle.exportKey('spki', keyPair.publicKey);\r\n    \r\n    return { keyPair, publicKey }; // Возвращаем пару ключей и публичный ключ\r\n  }\r\n  \r\n  // Вычисление общего ключа на основе публичного ключа клиента\r\n  export async function computeSharedKey(privateKey, clientPublicKeyBuffer) {\r\n    const algorithm = {\r\n      name: 'ECDH',\r\n      namedCurve: 'P-256',\r\n    };\r\n  \r\n    // Импортируем публичный ключ клиента из полученного буфера\r\n    const clientPublicKey = await window.crypto.subtle.importKey(\r\n      'spki', \r\n      clientPublicKeyBuffer, \r\n      algorithm, \r\n      false, \r\n      []\r\n    );\r\n  \r\n    // Используем приватный ключ сервера и публичный ключ клиента для вычисления общего ключа\r\n    const sharedKey = await window.crypto.subtle.deriveKey(\r\n      algorithm,\r\n      privateKey,\r\n      clientPublicKey,\r\n      true, // Экспортируем общий ключ\r\n      ['encrypt', 'decrypt'] // Указываем, что ключ будет использоваться для шифрования и расшифровки\r\n    );\r\n  \r\n    return sharedKey; // Возвращаем общий ключ\r\n  }\r\n  \r\n"],"mappings":"AACA;AACA,OAAO,eAAeA,oBAAoBA,CAAA,EAAG;EACzC,MAAMC,SAAS,GAAG;IAChBC,IAAI,EAAE,MAAM;IAAE;IACdC,UAAU,EAAE,OAAO,CAAE;EACvB,CAAC;;EAED;EACA,MAAMC,OAAO,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CAACP,SAAS,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;;EAEpG;EACA,MAAMQ,SAAS,GAAG,MAAMJ,MAAM,CAACC,MAAM,CAACC,MAAM,CAACG,SAAS,CAAC,MAAM,EAAEN,OAAO,CAACK,SAAS,CAAC;EAEjF,OAAO;IAAEL,OAAO;IAAEK;EAAU,CAAC,CAAC,CAAC;AACjC;;AAEA;AACA,OAAO,eAAeE,gBAAgBA,CAACC,UAAU,EAAEC,qBAAqB,EAAE;EACxE,MAAMZ,SAAS,GAAG;IAChBC,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE;EACd,CAAC;;EAED;EACA,MAAMW,eAAe,GAAG,MAAMT,MAAM,CAACC,MAAM,CAACC,MAAM,CAACQ,SAAS,CAC1D,MAAM,EACNF,qBAAqB,EACrBZ,SAAS,EACT,KAAK,EACL,EACF,CAAC;;EAED;EACA,MAAMe,SAAS,GAAG,MAAMX,MAAM,CAACC,MAAM,CAACC,MAAM,CAACU,SAAS,CACpDhB,SAAS,EACTW,UAAU,EACVE,eAAe,EACf,IAAI;EAAE;EACN,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;EACzB,CAAC;EAED,OAAOE,SAAS,CAAC,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}