{"ast":null,"code":"import CryptoJS from 'crypto-js';\nexport function encryptMessage(sharedKey, message) {\n  // Генерация нового IV для текущего запроса\n  const iv = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Base64);\n\n  // Зашифрованное сообщение\n  const encryptedMessage = CryptoJS.AES.encrypt(JSON.stringify(message), CryptoJS.enc.Base64.parse(sharedKey), {\n    iv: CryptoJS.enc.Base64.parse(iv),\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  }).toString();\n  console.log('Зашифрованное сообщение:', encryptedMessage);\n  console.log('IV:', iv);\n  return {\n    'iv': iv,\n    'encryptMessage': encryptMessage\n  };\n}\n\n// Функция для расшифровки сообщения\nexport function decryptMessage(ivBase64, encryptedMessageBase64, sharedKey) {\n  const iv = CryptoJS.enc.Base64.parse(ivBase64);\n  const encryptedMessage = CryptoJS.enc.Base64.parse(encryptedMessageBase64);\n  const decrypted = CryptoJS.AES.decrypt({\n    ciphertext: encryptedMessage\n  }, sharedKey,\n  // Преобразуем sharedKey\n  {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n  return JSON.parse(plaintext); // Предполагаем, что сообщение в формате JSON\n}","map":{"version":3,"names":["CryptoJS","encryptMessage","sharedKey","message","iv","lib","WordArray","random","toString","enc","Base64","encryptedMessage","AES","encrypt","JSON","stringify","parse","mode","CBC","padding","pad","Pkcs7","console","log","decryptMessage","ivBase64","encryptedMessageBase64","decrypted","decrypt","ciphertext","plaintext","Utf8"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/cryptoTools.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nexport function encryptMessage(sharedKey, message) {\r\n    \r\n    // Генерация нового IV для текущего запроса\r\n    const iv = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Base64);\r\n\r\n    // Зашифрованное сообщение\r\n    const encryptedMessage = CryptoJS.AES.encrypt(\r\n        JSON.stringify(message),\r\n        CryptoJS.enc.Base64.parse(sharedKey),\r\n        {\r\n            iv: CryptoJS.enc.Base64.parse(iv),\r\n            mode: CryptoJS.mode.CBC,\r\n            padding: CryptoJS.pad.Pkcs7,\r\n        }\r\n    ).toString();\r\n\r\n    console.log('Зашифрованное сообщение:', encryptedMessage);\r\n    console.log('IV:', iv);\r\n    return {'iv': iv, 'encryptMessage': encryptMessage};\r\n}\r\n\r\n\r\n// Функция для расшифровки сообщения\r\nexport function decryptMessage(ivBase64, encryptedMessageBase64, sharedKey) {\r\n    const iv = CryptoJS.enc.Base64.parse(ivBase64);\r\n    const encryptedMessage = CryptoJS.enc.Base64.parse(encryptedMessageBase64);\r\n  \r\n    const decrypted = CryptoJS.AES.decrypt(\r\n      { ciphertext: encryptedMessage },\r\n      sharedKey, // Преобразуем sharedKey\r\n      {\r\n        iv: iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n      }\r\n    );\r\n  \r\n    const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n    return JSON.parse(plaintext); // Предполагаем, что сообщение в формате JSON\r\n  }\r\n\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAEhC,OAAO,SAASC,cAAcA,CAACC,SAAS,EAAEC,OAAO,EAAE;EAE/C;EACA,MAAMC,EAAE,GAAGJ,QAAQ,CAACK,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAACC,QAAQ,CAACR,QAAQ,CAACS,GAAG,CAACC,MAAM,CAAC;;EAE1E;EACA,MAAMC,gBAAgB,GAAGX,QAAQ,CAACY,GAAG,CAACC,OAAO,CACzCC,IAAI,CAACC,SAAS,CAACZ,OAAO,CAAC,EACvBH,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACM,KAAK,CAACd,SAAS,CAAC,EACpC;IACIE,EAAE,EAAEJ,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACM,KAAK,CAACZ,EAAE,CAAC;IACjCa,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAEnB,QAAQ,CAACoB,GAAG,CAACC;EAC1B,CACJ,CAAC,CAACb,QAAQ,CAAC,CAAC;EAEZc,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEZ,gBAAgB,CAAC;EACzDW,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEnB,EAAE,CAAC;EACtB,OAAO;IAAC,IAAI,EAAEA,EAAE;IAAE,gBAAgB,EAAEH;EAAc,CAAC;AACvD;;AAGA;AACA,OAAO,SAASuB,cAAcA,CAACC,QAAQ,EAAEC,sBAAsB,EAAExB,SAAS,EAAE;EACxE,MAAME,EAAE,GAAGJ,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACM,KAAK,CAACS,QAAQ,CAAC;EAC9C,MAAMd,gBAAgB,GAAGX,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACM,KAAK,CAACU,sBAAsB,CAAC;EAE1E,MAAMC,SAAS,GAAG3B,QAAQ,CAACY,GAAG,CAACgB,OAAO,CACpC;IAAEC,UAAU,EAAElB;EAAiB,CAAC,EAChCT,SAAS;EAAE;EACX;IACEE,EAAE,EAAEA,EAAE;IACNa,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAEnB,QAAQ,CAACoB,GAAG,CAACC;EACxB,CACF,CAAC;EAED,MAAMS,SAAS,GAAGH,SAAS,CAACnB,QAAQ,CAACR,QAAQ,CAACS,GAAG,CAACsB,IAAI,CAAC;EACvD,OAAOjB,IAAI,CAACE,KAAK,CAACc,SAAS,CAAC,CAAC,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}