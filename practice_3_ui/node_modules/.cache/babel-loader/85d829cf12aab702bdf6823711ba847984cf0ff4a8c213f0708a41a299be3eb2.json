{"ast":null,"code":"import { prime } from 'bigint-crypto-utils';\n\n// Генерация большого простого числа (асинхронная функция)\nexport async function generateLargePrime(bits = 512) {\n  const largePrime = await prime(bits);\n  return largePrime;\n}\nimport { modPow } from 'bigint-crypto-utils';\n\n// Функция для получения простых делителей числа\nfunction getPrimeFactors(n) {\n  let factors = [];\n  let i = 2n;\n  while (i * i <= n) {\n    while (n % i === 0n) {\n      factors.push(i);\n      n /= i;\n    }\n    i += 1n;\n  }\n  if (n > 1n) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n// Функция для нахождения примитивного корня по модулю p\nexport async function findPrimitiveRoot(p) {\n  const pMinusOne = p - 1n;\n\n  // Получаем простые делители числа p-1\n  const factors = getPrimeFactors(pMinusOne);\n\n  // Ищем примитивный корень\n  for (let g = 2n; g < p; g++) {\n    let isPrimitive = true;\n\n    // Проверяем для каждого делителя p-1\n    for (let factor of factors) {\n      // Если g^(p-1/factor) % p == 1, то g не примитивный корень\n      if (modPow(g, pMinusOne / factor, p) === 1n) {\n        isPrimitive = false;\n        break;\n      }\n    }\n    if (isPrimitive) {\n      return g; // Возвращаем примитивный корень\n    }\n  }\n  return null; // Примитивный корень не найден\n}","map":{"version":3,"names":["prime","generateLargePrime","bits","largePrime","modPow","getPrimeFactors","n","factors","i","push","findPrimitiveRoot","p","pMinusOne","g","isPrimitive","factor"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/generatingNumberTools.js"],"sourcesContent":["\r\nimport { prime } from 'bigint-crypto-utils';\r\n\r\n\r\n// Генерация большого простого числа (асинхронная функция)\r\nexport async function generateLargePrime(bits = 512) {\r\n  const largePrime = await prime(bits);\r\n  return largePrime;\r\n}\r\n\r\nimport { modPow } from 'bigint-crypto-utils';\r\n\r\n// Функция для получения простых делителей числа\r\nfunction getPrimeFactors(n) {\r\n  let factors = [];\r\n  let i = 2n;\r\n  while (i * i <= n) {\r\n    while (n % i === 0n) {\r\n      factors.push(i);\r\n      n /= i;\r\n    }\r\n    i += 1n;\r\n  }\r\n  if (n > 1n) {\r\n    factors.push(n);\r\n  }\r\n  return factors;\r\n}\r\n\r\n// Функция для нахождения примитивного корня по модулю p\r\nexport async function findPrimitiveRoot(p) {\r\n  const pMinusOne = p - 1n;\r\n  \r\n  // Получаем простые делители числа p-1\r\n  const factors = getPrimeFactors(pMinusOne);\r\n  \r\n  // Ищем примитивный корень\r\n  for (let g = 2n; g < p; g++) {\r\n    let isPrimitive = true;\r\n    \r\n    // Проверяем для каждого делителя p-1\r\n    for (let factor of factors) {\r\n      // Если g^(p-1/factor) % p == 1, то g не примитивный корень\r\n      if (modPow(g, pMinusOne / factor, p) === 1n) {\r\n        isPrimitive = false;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (isPrimitive) {\r\n      return g; // Возвращаем примитивный корень\r\n    }\r\n  }\r\n\r\n  return null; // Примитивный корень не найден\r\n}\r\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,qBAAqB;;AAG3C;AACA,OAAO,eAAeC,kBAAkBA,CAACC,IAAI,GAAG,GAAG,EAAE;EACnD,MAAMC,UAAU,GAAG,MAAMH,KAAK,CAACE,IAAI,CAAC;EACpC,OAAOC,UAAU;AACnB;AAEA,SAASC,MAAM,QAAQ,qBAAqB;;AAE5C;AACA,SAASC,eAAeA,CAACC,CAAC,EAAE;EAC1B,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,CAAC,GAAG,EAAE;EACV,OAAOA,CAAC,GAAGA,CAAC,IAAIF,CAAC,EAAE;IACjB,OAAOA,CAAC,GAAGE,CAAC,KAAK,EAAE,EAAE;MACnBD,OAAO,CAACE,IAAI,CAACD,CAAC,CAAC;MACfF,CAAC,IAAIE,CAAC;IACR;IACAA,CAAC,IAAI,EAAE;EACT;EACA,IAAIF,CAAC,GAAG,EAAE,EAAE;IACVC,OAAO,CAACE,IAAI,CAACH,CAAC,CAAC;EACjB;EACA,OAAOC,OAAO;AAChB;;AAEA;AACA,OAAO,eAAeG,iBAAiBA,CAACC,CAAC,EAAE;EACzC,MAAMC,SAAS,GAAGD,CAAC,GAAG,EAAE;;EAExB;EACA,MAAMJ,OAAO,GAAGF,eAAe,CAACO,SAAS,CAAC;;EAE1C;EACA,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;IAC3B,IAAIC,WAAW,GAAG,IAAI;;IAEtB;IACA,KAAK,IAAIC,MAAM,IAAIR,OAAO,EAAE;MAC1B;MACA,IAAIH,MAAM,CAACS,CAAC,EAAED,SAAS,GAAGG,MAAM,EAAEJ,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3CG,WAAW,GAAG,KAAK;QACnB;MACF;IACF;IAEA,IAAIA,WAAW,EAAE;MACf,OAAOD,CAAC,CAAC,CAAC;IACZ;EACF;EAEA,OAAO,IAAI,CAAC,CAAC;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}