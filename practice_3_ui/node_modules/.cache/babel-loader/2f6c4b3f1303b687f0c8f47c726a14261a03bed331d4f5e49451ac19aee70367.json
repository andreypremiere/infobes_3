{"ast":null,"code":"import { decodeToken } from \"../JWTProvider\";\nexport async function requestUpdateNote(data, sharedKey) {\n  const encryptedMessage = encryptMessage(sharedKey, data);\n  const result = await fetch('http://localhost:5000/update_note', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  if (result.status === 200) {\n    return true;\n  }\n  return false;\n}\nexport async function requestGetNotes(nickName, sharedKey) {\n  let role = decodeToken().role;\n  const data = {\n    'nickName': nickName,\n    'role': role\n  };\n  const encryptedMessage = encryptMessage(sharedKey, data);\n  const result = await fetch('http://localhost:5000/update_note', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  if (result.status === 200) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["decodeToken","requestUpdateNote","data","sharedKey","encryptedMessage","encryptMessage","result","fetch","method","headers","body","JSON","stringify","iv","status","requestGetNotes","nickName","role"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/requests/requestNotes.js"],"sourcesContent":["import { decodeToken } from \"../JWTProvider\"\r\n\r\nexport async function requestUpdateNote(data, sharedKey) {\r\n\r\n    const encryptedMessage = encryptMessage(sharedKey, data)\r\n\r\n    const result = await fetch('http://localhost:5000/update_note', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    if (result.status === 200) {\r\n        return true\r\n    }\r\n    \r\n    return false\r\n}\r\n\r\nexport async function requestGetNotes(nickName, sharedKey) {\r\n    let role = decodeToken().role\r\n\r\n    const data = {'nickName': nickName, 'role': role, }\r\n\r\n    const encryptedMessage = encryptMessage(sharedKey, data)\r\n\r\n    const result = await fetch('http://localhost:5000/update_note', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    if (result.status === 200) {\r\n        return true\r\n    }\r\n    \r\n    return false\r\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAE5C,OAAO,eAAeC,iBAAiBA,CAACC,IAAI,EAAEC,SAAS,EAAE;EAErD,MAAMC,gBAAgB,GAAGC,cAAc,CAACF,SAAS,EAAED,IAAI,CAAC;EAExD,MAAMI,MAAM,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjB,IAAI,EAAER,gBAAgB,CAACS,EAAE;MACzB,kBAAkB,EAAET,gBAAgB,CAACA;IACzC,CAAC;EACL,CAAC,CAAC;EAEF,IAAIE,MAAM,CAACQ,MAAM,KAAK,GAAG,EAAE;IACvB,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB;AAEA,OAAO,eAAeC,eAAeA,CAACC,QAAQ,EAAEb,SAAS,EAAE;EACvD,IAAIc,IAAI,GAAGjB,WAAW,CAAC,CAAC,CAACiB,IAAI;EAE7B,MAAMf,IAAI,GAAG;IAAC,UAAU,EAAEc,QAAQ;IAAE,MAAM,EAAEC;EAAM,CAAC;EAEnD,MAAMb,gBAAgB,GAAGC,cAAc,CAACF,SAAS,EAAED,IAAI,CAAC;EAExD,MAAMI,MAAM,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjB,IAAI,EAAER,gBAAgB,CAACS,EAAE;MACzB,kBAAkB,EAAET,gBAAgB,CAACA;IACzC,CAAC;EACL,CAAC,CAAC;EAEF,IAAIE,MAAM,CAACQ,MAAM,KAAK,GAAG,EAAE;IACvB,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}