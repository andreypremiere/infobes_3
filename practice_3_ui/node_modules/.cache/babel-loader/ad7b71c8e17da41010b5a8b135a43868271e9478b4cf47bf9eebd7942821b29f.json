{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0443\\u0447\\u0435\\u0431\\u0430\\\\3 \\u043A\\u0443\\u0440\\u0441\\\\1 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\\\u0418\\u043D\\u0444\\u043E\\u0411\\u0435\\u0437\\\\pracitce_3\\\\practice_3_ui\\\\src\\\\App.js\";\n/* global BigInt */\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { decryptMessage, encryptMessage } from \"./cryptoTools\";\nimport { generateRandomNumber, calculateNumberB, calculateNumberS, deriveKey, deriveKeyPythonCompatible } from \"./numberTools\";\nimport { getKeys, sendKeyB, getMessage, compareKeys, sendMessage } from \"./requests/requestExchangeKey\";\nimport { Registration } from \"./components/Registration/Registration\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const [b, setb] = useState(generateRandomNumber());\n  // const [B, setB] = useState(null);\n  // const [S, setS] = useState(null);\n  // const [derivedKey, setDerivedKey] = useState(undefined);\n  // const [decryptedMessage, setDecryptedMessage] = useState(null);\n\n  // // Получение ключей от сервера при монтировании компонента\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     console.log(`сгенерированное число b: ${b}`);\n\n  //     const keys = await getKeys(); // Получение данных с сервера\n  //     console.log(`Полученное число A: ${keys.key_A}`);\n\n  //     const B_loc = calculateNumberB(keys.key_g, b, keys.key_p);\n  //     setB(B_loc);\n  //     console.log(`Число B: ${B_loc}`);\n\n  //     sendKeyB(B_loc);\n\n  //     const S_local = calculateNumberS(keys.key_A, b, keys.key_p);\n  //     setS(S_local);\n  //     console.log(`S: ${S_local}`)\n\n  //     function uint8ArrayToHex(uint8Array) {\n  //       return Array.from(uint8Array)\n  //           .map(byte => byte.toString(16).padStart(2, '0')) // Преобразуем каждый байт в шестнадцатеричное значение\n  //           .join(''); // Соединяем их в строку\n  //   }    \n\n  //     const derivedKey = await deriveKey(S_local); // Генерация ключа\n  //     setDerivedKey(derivedKey);\n  //     console.log(`derivedKey: ${uint8ArrayToHex(derivedKey)}`)\n\n  //     await compareKeys(derivedKey)\n  //     const data = await getMessage();\n  //     console.log(`iv: ${data.iv}`)\n  //     console.log(`iv: ${typeof data.iv}`)\n\n  //     console.log(`encrypted_message: ${data.encrypted_message}`)\n  //     console.log(`encrypted_message: ${typeof data.encrypted_message}`)\n\n  //     const decryptedMessage = decryptMessage(data.iv, data.encrypted_message, derivedKey)\n  //     console.log(decryptedMessage)\n\n  //     const dataForChipher = {'one': 'hello', 'two': [32, 28]}\n  //     const dataIvAndMessage = encryptMessage(derivedKey, dataForChipher)\n  //     console.log(`iv: ${dataIvAndMessage.iv}`)\n  //     console.log(`mes: ${dataIvAndMessage.encryptedMessage}`)\n\n  //     sendMessage(dataIvAndMessage.iv, dataIvAndMessage.encryptedMessage);\n\n  // };\n\n  // fetchData();\n\n  // }, []);\n\n  return (\n    /*#__PURE__*/\n    // <BrowserRouter>\n    //   <Routes>\n    //     <Route\n    //       path=\"/\"\n    //       element={\n    //         <div>\n    //           <h1>React + Diffie-Hellman</h1>\n    //           <p>b: {b.toString()}</p>\n    //           <p>B: {B ? B.toString() : \"Загрузка...\"}</p>\n    //           <p>S: {S ? S.toString() : \"Загрузка...\"}</p>\n    //           <p>Ключ: {derivedKey ? derivedKey.toString() : \"Загрузка...\"}</p>\n    //           <p>Сообщение: {decryptedMessage || \"Загрузка...\"}</p>\n    //         </div>\n    //       }\n    //     />\n    //   </Routes>\n    // </BrowserRouter>\n    _jsxDEV(Registration, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Routes","Route","decryptMessage","encryptMessage","generateRandomNumber","calculateNumberB","calculateNumberS","deriveKey","deriveKeyPythonCompatible","getKeys","sendKeyB","getMessage","compareKeys","sendMessage","Registration","jsxDEV","_jsxDEV","App","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/App.js"],"sourcesContent":["/* global BigInt */\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { decryptMessage, encryptMessage } from \"./cryptoTools\";\nimport {\n  generateRandomNumber,\n  calculateNumberB,\n  calculateNumberS,\n  deriveKey,\n  deriveKeyPythonCompatible\n} from \"./numberTools\";\nimport { getKeys, sendKeyB, getMessage, compareKeys, sendMessage } from \"./requests/requestExchangeKey\";\nimport { Registration } from \"./components/Registration/Registration\";\n\nfunction App() {\n  // const [b, setb] = useState(generateRandomNumber());\n  // const [B, setB] = useState(null);\n  // const [S, setS] = useState(null);\n  // const [derivedKey, setDerivedKey] = useState(undefined);\n  // const [decryptedMessage, setDecryptedMessage] = useState(null);\n\n  // // Получение ключей от сервера при монтировании компонента\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     console.log(`сгенерированное число b: ${b}`);\n\n  //     const keys = await getKeys(); // Получение данных с сервера\n  //     console.log(`Полученное число A: ${keys.key_A}`);\n      \n  //     const B_loc = calculateNumberB(keys.key_g, b, keys.key_p);\n  //     setB(B_loc);\n  //     console.log(`Число B: ${B_loc}`);\n\n  //     sendKeyB(B_loc);\n\n  //     const S_local = calculateNumberS(keys.key_A, b, keys.key_p);\n  //     setS(S_local);\n  //     console.log(`S: ${S_local}`)\n\n  //     function uint8ArrayToHex(uint8Array) {\n  //       return Array.from(uint8Array)\n  //           .map(byte => byte.toString(16).padStart(2, '0')) // Преобразуем каждый байт в шестнадцатеричное значение\n  //           .join(''); // Соединяем их в строку\n  //   }    \n\n  //     const derivedKey = await deriveKey(S_local); // Генерация ключа\n  //     setDerivedKey(derivedKey);\n  //     console.log(`derivedKey: ${uint8ArrayToHex(derivedKey)}`)\n\n  //     await compareKeys(derivedKey)\n  //     const data = await getMessage();\n  //     console.log(`iv: ${data.iv}`)\n  //     console.log(`iv: ${typeof data.iv}`)\n\n  //     console.log(`encrypted_message: ${data.encrypted_message}`)\n  //     console.log(`encrypted_message: ${typeof data.encrypted_message}`)\n\n  //     const decryptedMessage = decryptMessage(data.iv, data.encrypted_message, derivedKey)\n  //     console.log(decryptedMessage)\n\n\n  //     const dataForChipher = {'one': 'hello', 'two': [32, 28]}\n  //     const dataIvAndMessage = encryptMessage(derivedKey, dataForChipher)\n  //     console.log(`iv: ${dataIvAndMessage.iv}`)\n  //     console.log(`mes: ${dataIvAndMessage.encryptedMessage}`)\n\n  //     sendMessage(dataIvAndMessage.iv, dataIvAndMessage.encryptedMessage);\n\n  // };\n\n  // fetchData();\n\n  // }, []);\n\n  return (\n    // <BrowserRouter>\n    //   <Routes>\n    //     <Route\n    //       path=\"/\"\n    //       element={\n    //         <div>\n    //           <h1>React + Diffie-Hellman</h1>\n    //           <p>b: {b.toString()}</p>\n    //           <p>B: {B ? B.toString() : \"Загрузка...\"}</p>\n    //           <p>S: {S ? S.toString() : \"Загрузка...\"}</p>\n    //           <p>Ключ: {derivedKey ? derivedKey.toString() : \"Загрузка...\"}</p>\n    //           <p>Сообщение: {decryptedMessage || \"Загрузка...\"}</p>\n    //         </div>\n    //       }\n    //     />\n    //   </Routes>\n    // </BrowserRouter>\n  \n    \n    <Registration></Registration>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC/D,SAASC,cAAc,EAAEC,cAAc,QAAQ,eAAe;AAC9D,SACEC,oBAAoB,EACpBC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAS,EACTC,yBAAyB,QACpB,eAAe;AACtB,SAASC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAEC,WAAW,QAAQ,+BAA+B;AACvG,SAASC,YAAY,QAAQ,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,GAAGA,CAAA,EAAG;EACb;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGAD,OAAA,CAACF,YAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe;EAAC;AAEjC;AAACC,EAAA,GAlFQL,GAAG;AAoFZ,eAAeA,GAAG;AAAC,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}