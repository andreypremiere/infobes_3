{"ast":null,"code":"export async function getKeys() {\n  try {\n    const response = await fetch('http://localhost:5000/get_keys', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Ошибка: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    // console.log('Полученные ключи:', data);\n    return data;\n  } catch (error) {\n    console.error('Ошибка при получении ключей:', error);\n    return null;\n  }\n}\nexport async function sendKeyB(keyB) {\n  try {\n    const response = await fetch('http://localhost:5000/get_key_B', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        key_B: keyB.toString() // Преобразование BigInt в строку\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Ошибка HTTP: ${response.status}`);\n    }\n    const data = await response.json();\n    // console.log('Ответ от сервера:', data);\n  } catch (error) {\n    console.error('Ошибка при отправке ключа B:', error);\n  }\n}\nexport async function getMessage() {\n  try {\n    const response = await fetch('http://localhost:5000', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Ошибка: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    // console.log('Полученные ключи:', data);\n    return data;\n  } catch (error) {\n    console.error('Ошибка при получении ключей:', error);\n    return null;\n  }\n}\nexport async function compareKeys(divireKey) {\n  const response = await fetch('http://localhost:5000/compare_devire_key', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'devire_key': divireKey.toString()\n    })\n  });\n}\nexport async function sendMessage(dataForChipher) {\n  const response = await fetch('http://localhost:5000/get_encrypt_message', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': dataForChipher.iv,\n      'decryptMessage': dataForChipher.encryptMessage\n    })\n  });\n}","map":{"version":3,"names":["getKeys","response","fetch","method","headers","ok","Error","status","statusText","data","json","error","console","sendKeyB","keyB","body","JSON","stringify","key_B","toString","getMessage","compareKeys","divireKey","sendMessage","dataForChipher","iv","encryptMessage"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/requests/requestExchangeKey.js"],"sourcesContent":["export async function getKeys() {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/get_keys', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ошибка: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        // console.log('Полученные ключи:', data);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Ошибка при получении ключей:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function sendKeyB(keyB) {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/get_key_B', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                key_B: keyB.toString(), // Преобразование BigInt в строку\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ошибка HTTP: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        // console.log('Ответ от сервера:', data);\r\n    } catch (error) {\r\n        console.error('Ошибка при отправке ключа B:', error);\r\n    }\r\n}\r\n\r\n\r\nexport async function getMessage() {\r\n    try {\r\n        const response = await fetch('http://localhost:5000', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ошибка: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        // console.log('Полученные ключи:', data);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Ошибка при получении ключей:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function compareKeys(divireKey) {\r\n    const response = await fetch('http://localhost:5000/compare_devire_key', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'devire_key': divireKey.toString(), \r\n        }),\r\n    });\r\n}\r\n\r\nexport async function sendMessage(dataForChipher) {\r\n    const response = await fetch('http://localhost:5000/get_encrypt_message', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': dataForChipher.iv,\r\n            'decryptMessage': dataForChipher.encryptMessage\r\n        })\r\n    })\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}