{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0443\\u0447\\u0435\\u0431\\u0430\\\\3 \\u043A\\u0443\\u0440\\u0441\\\\1 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\\\u0418\\u043D\\u0444\\u043E\\u0411\\u0435\\u0437\\\\pracitce_3\\\\practice_3_ui\\\\src\\\\DiffieHellmanExchange.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { generateDhParameters, computeSharedKey } from './diffieUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffieHellmanExchange = () => {\n  _s();\n  const [sharedKey, setSharedKey] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Обработчик обмена ключами\n  const handleKeyExchange = async () => {\n    try {\n      // Генерация параметров Diffie-Hellman и публичного ключа\n      const {\n        dh,\n        publicKey\n      } = await generateDhParameters();\n\n      // Преобразуем publicKey в base64\n      const encoder = new TextEncoder();\n      const publicKeyBase64 = btoa(String.fromCharCode(...encoder.encode(publicKey)));\n\n      // Отправка публичного ключа на сервер\n      const response = await fetch('http://127.0.0.1:5000/diffie/exchange', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          public_key: publicKeyBase64\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n\n        // Получение публичного ключа сервера\n        const serverPublicKeyBase64 = data.server_public_key;\n        const serverPublicKey = Uint8Array.from(atob(serverPublicKeyBase64), c => c.charCodeAt(0));\n\n        // Вычисление общего ключа\n        const sharedKey = await computeSharedKey(dh, serverPublicKey);\n\n        // Преобразование общего ключа в строку для отображения (например, в hex-формате)\n        setSharedKey(sharedKey.toString('hex'));\n      } else {\n        setError('Ошибка обмена ключами');\n      }\n    } catch (err) {\n      setError(`Ошибка: ${err.message}`);\n      console.error(err); // Логируем ошибку для отладки\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041E\\u0431\\u043C\\u0435\\u043D \\u043A\\u043B\\u044E\\u0447\\u0430\\u043C\\u0438 Diffie-Hellman\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleKeyExchange,\n      children: \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u043E\\u0431\\u043C\\u0435\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), sharedKey && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041E\\u0431\\u0449\\u0438\\u0439 \\u043A\\u043B\\u044E\\u0447:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sharedKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(DiffieHellmanExchange, \"uDkPUGLWt+X4JS0Nnt8Q1lYr1Dk=\");\n_c = DiffieHellmanExchange;\nexport default DiffieHellmanExchange;\nvar _c;\n$RefreshReg$(_c, \"DiffieHellmanExchange\");","map":{"version":3,"names":["React","useState","generateDhParameters","computeSharedKey","jsxDEV","_jsxDEV","DiffieHellmanExchange","_s","sharedKey","setSharedKey","error","setError","handleKeyExchange","dh","publicKey","encoder","TextEncoder","publicKeyBase64","btoa","String","fromCharCode","encode","response","fetch","method","headers","body","JSON","stringify","public_key","ok","data","json","serverPublicKeyBase64","server_public_key","serverPublicKey","Uint8Array","from","atob","c","charCodeAt","toString","err","message","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/DiffieHellmanExchange.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { generateDhParameters, computeSharedKey } from './diffieUtils';\r\n\r\nconst DiffieHellmanExchange = () => {\r\n  const [sharedKey, setSharedKey] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Обработчик обмена ключами\r\n  const handleKeyExchange = async () => {\r\n    try {\r\n      // Генерация параметров Diffie-Hellman и публичного ключа\r\n      const { dh, publicKey } = await generateDhParameters();\r\n\r\n      // Преобразуем publicKey в base64\r\n      const encoder = new TextEncoder();\r\n      const publicKeyBase64 = btoa(String.fromCharCode(...encoder.encode(publicKey)));\r\n\r\n      // Отправка публичного ключа на сервер\r\n      const response = await fetch('http://127.0.0.1:5000/diffie/exchange', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          public_key: publicKeyBase64,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n\r\n        // Получение публичного ключа сервера\r\n        const serverPublicKeyBase64 = data.server_public_key;\r\n        const serverPublicKey = Uint8Array.from(atob(serverPublicKeyBase64), (c) => c.charCodeAt(0));\r\n\r\n        // Вычисление общего ключа\r\n        const sharedKey = await computeSharedKey(dh, serverPublicKey);\r\n\r\n        // Преобразование общего ключа в строку для отображения (например, в hex-формате)\r\n        setSharedKey(sharedKey.toString('hex'));\r\n      } else {\r\n        setError('Ошибка обмена ключами');\r\n      }\r\n    } catch (err) {\r\n      setError(`Ошибка: ${err.message}`);\r\n      console.error(err); // Логируем ошибку для отладки\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Обмен ключами Diffie-Hellman</h1>\r\n      <button onClick={handleKeyExchange}>Начать обмен</button>\r\n      {sharedKey && (\r\n        <div>\r\n          <h2>Общий ключ:</h2>\r\n          <p>{sharedKey}</p>\r\n        </div>\r\n      )}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiffieHellmanExchange;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}