{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0443\\u0447\\u0435\\u0431\\u0430\\\\3 \\u043A\\u0443\\u0440\\u0441\\\\1 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\\\u0418\\u043D\\u0444\\u043E\\u0411\\u0435\\u0437\\\\pracitce_3\\\\practice_3_ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/* global BigInt */\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { decryptMessage, encryptMessage } from \"./cryptoTools\";\nimport { generateRandomNumber, calculateNumberB, calculateNumberS, deriveKey, deriveKeyPythonCompatible } from \"./numberTools\";\nimport { getKeys, sendKeyB, getMessage, compareKeys, sendMessage } from \"./requests/requestExchangeKey\";\nimport { Registration } from \"./components/Registration/Registration\";\nimport { MainWindow } from \"./components/MainWindow/MainWindow\";\nimport { Note } from './components/MainWindow/Note';\nimport { generateLargePrime, findPrimitiveRoot } from './generatingNumberTools';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [b, setb] = useState(generateRandomNumber());\n  const [B, setB] = useState(null);\n  const [S, setS] = useState(null);\n  const [derivedKey, setDerivedKey] = useState(undefined);\n  const [decryptedMessage, setDecryptedMessage] = useState(null);\n\n  // Получение ключей от сервера при монтировании компонента\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     console.log(`сгенерированное число b: ${b}`);\n\n  //     const keys = await getKeys(); // Получение данных с сервера\n  //     console.log(`Полученное число A: ${keys.key_A}`);\n\n  //     const B_loc = calculateNumberB(keys.key_g, b, keys.key_p);\n  //     setB(B_loc);\n  //     console.log(`Число B: ${B_loc}`);\n\n  //     sendKeyB(B_loc);\n\n  //     const S_local = calculateNumberS(keys.key_A, b, keys.key_p);\n  //     setS(S_local);\n  //     console.log(`S: ${S_local}`)\n\n  //     function uint8ArrayToHex(uint8Array) {\n  //       return Array.from(uint8Array)\n  //           .map(byte => byte.toString(16).padStart(2, '0')) // Преобразуем каждый байт в шестнадцатеричное значение\n  //           .join(''); // Соединяем их в строку\n  //   }    \n\n  //     const derivedKey = await deriveKey(S_local); // Генерация ключа\n  //     setDerivedKey(derivedKey);\n  //     console.log(`derivedKey: ${uint8ArrayToHex(derivedKey)}`)\n\n  //     await compareKeys(derivedKey)\n  //     const data = await getMessage();\n  //     console.log(`iv: ${data.iv}`)\n  //     console.log(`iv: ${typeof data.iv}`)\n\n  //     console.log(`encrypted_message: ${data.encrypted_message}`)\n  //     console.log(`encrypted_message: ${typeof data.encrypted_message}`)\n\n  //     const decryptedMessage = decryptMessage(data.iv, data.encrypted_message, derivedKey)\n  //     console.log(decryptedMessage)\n\n  //     const dataForChipher = {'one': 'hello', 'two': [32, 28]}\n  //     const dataIvAndMessage = encryptMessage(derivedKey, dataForChipher)\n  //     console.log(`iv: ${dataIvAndMessage.iv}`)\n  //     console.log(`mes: ${dataIvAndMessage.encryptedMessage}`)\n\n  //     sendMessage(dataIvAndMessage.iv, dataIvAndMessage.encryptedMessage);\n\n  // };\n\n  // fetchData();\n\n  // }, []); \n\n  return (\n    /*#__PURE__*/\n    // <Registration sharedKey={derivedKey}></Registration>\n    // <MainWindow sharedKey={derivedKey}></MainWindow>\n    // <Router>\n    //     <Routes>\n    //         <Route path='/' element={<Registration sharedKey={derivedKey}></Registration>} />\n    //         <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n    //         <Route path=\"/working/:id\" element={<Note></Note>} />\n    //     </Routes>\n    // </Router>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"P = \", p ? p.toString() : 'Загрузка']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"G = \", g ? g.toString() : 'Загрузка']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)\n\n    // <Router>\n    //     <Routes>\n    //         {/* Маршрут для начального компонента */}\n    //         <Route path=\"/\" element={<Registration sharedKey={derivedKey}></Registration>} />\n\n    //         {/* Маршрут для целевого компонента */}\n    //         <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n    //     </Routes>\n    // </Router>\n  );\n}\n_s(App, \"m9xs8k1V0NzfOyXTc5o+k+TPKsg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Routes","Route","decryptMessage","encryptMessage","generateRandomNumber","calculateNumberB","calculateNumberS","deriveKey","deriveKeyPythonCompatible","getKeys","sendKeyB","getMessage","compareKeys","sendMessage","Registration","MainWindow","Note","generateLargePrime","findPrimitiveRoot","jsxDEV","_jsxDEV","App","_s","b","setb","B","setB","S","setS","derivedKey","setDerivedKey","undefined","decryptedMessage","setDecryptedMessage","children","p","toString","fileName","_jsxFileName","lineNumber","columnNumber","g","_c","$RefreshReg$"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/App.js"],"sourcesContent":["/* global BigInt */\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { decryptMessage, encryptMessage } from \"./cryptoTools\";\nimport {\n  generateRandomNumber,\n  calculateNumberB,\n  calculateNumberS,\n  deriveKey,\n  deriveKeyPythonCompatible\n} from \"./numberTools\";\nimport { getKeys, sendKeyB, getMessage, compareKeys, sendMessage } from \"./requests/requestExchangeKey\";\nimport { Registration } from \"./components/Registration/Registration\";\nimport { MainWindow } from \"./components/MainWindow/MainWindow\";\nimport { Note } from './components/MainWindow/Note'\nimport {generateLargePrime, findPrimitiveRoot} from './generatingNumberTools'\n\nfunction App() {\n  const [b, setb] = useState(generateRandomNumber());\n  const [B, setB] = useState(null);\n  const [S, setS] = useState(null);\n  const [derivedKey, setDerivedKey] = useState(undefined);\n  const [decryptedMessage, setDecryptedMessage] = useState(null);\n\n\n  // Получение ключей от сервера при монтировании компонента\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     console.log(`сгенерированное число b: ${b}`);\n\n  //     const keys = await getKeys(); // Получение данных с сервера\n  //     console.log(`Полученное число A: ${keys.key_A}`);\n      \n  //     const B_loc = calculateNumberB(keys.key_g, b, keys.key_p);\n  //     setB(B_loc);\n  //     console.log(`Число B: ${B_loc}`);\n\n  //     sendKeyB(B_loc);\n\n  //     const S_local = calculateNumberS(keys.key_A, b, keys.key_p);\n  //     setS(S_local);\n  //     console.log(`S: ${S_local}`)\n\n  //     function uint8ArrayToHex(uint8Array) {\n  //       return Array.from(uint8Array)\n  //           .map(byte => byte.toString(16).padStart(2, '0')) // Преобразуем каждый байт в шестнадцатеричное значение\n  //           .join(''); // Соединяем их в строку\n  //   }    \n\n  //     const derivedKey = await deriveKey(S_local); // Генерация ключа\n  //     setDerivedKey(derivedKey);\n  //     console.log(`derivedKey: ${uint8ArrayToHex(derivedKey)}`)\n\n  //     await compareKeys(derivedKey)\n  //     const data = await getMessage();\n  //     console.log(`iv: ${data.iv}`)\n  //     console.log(`iv: ${typeof data.iv}`)\n\n  //     console.log(`encrypted_message: ${data.encrypted_message}`)\n  //     console.log(`encrypted_message: ${typeof data.encrypted_message}`)\n\n  //     const decryptedMessage = decryptMessage(data.iv, data.encrypted_message, derivedKey)\n  //     console.log(decryptedMessage)\n\n\n  //     const dataForChipher = {'one': 'hello', 'two': [32, 28]}\n  //     const dataIvAndMessage = encryptMessage(derivedKey, dataForChipher)\n  //     console.log(`iv: ${dataIvAndMessage.iv}`)\n  //     console.log(`mes: ${dataIvAndMessage.encryptedMessage}`)\n\n  //     sendMessage(dataIvAndMessage.iv, dataIvAndMessage.encryptedMessage);\n\n  // };\n\n  // fetchData();\n\n  // }, []); \n\n  return (\n    // <Registration sharedKey={derivedKey}></Registration>\n\n    // <MainWindow sharedKey={derivedKey}></MainWindow>\n    // <Router>\n    //     <Routes>\n    //         <Route path='/' element={<Registration sharedKey={derivedKey}></Registration>} />\n    //         <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n    //         <Route path=\"/working/:id\" element={<Note></Note>} />\n    //     </Routes>\n    // </Router>\n    <div>\n      <p>P = {p ? p.toString() : 'Загрузка'}</p>\n      <p>G = {g ? g.toString() : 'Загрузка'}</p>\n    </div>\n    \n    // <Router>\n    //     <Routes>\n    //         {/* Маршрут для начального компонента */}\n    //         <Route path=\"/\" element={<Registration sharedKey={derivedKey}></Registration>} />\n\n    //         {/* Маршрут для целевого компонента */}\n    //         <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n    //     </Routes>\n    // </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,SAASC,cAAc,EAAEC,cAAc,QAAQ,eAAe;AAC9D,SACEC,oBAAoB,EACpBC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAS,EACTC,yBAAyB,QACpB,eAAe;AACtB,SAASC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAEC,WAAW,QAAQ,+BAA+B;AACvG,SAASC,YAAY,QAAQ,wCAAwC;AACrE,SAASC,UAAU,QAAQ,oCAAoC;AAC/D,SAASC,IAAI,QAAQ,8BAA8B;AACnD,SAAQC,kBAAkB,EAAEC,iBAAiB,QAAO,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,CAAC,EAAEC,IAAI,CAAC,GAAG3B,QAAQ,CAACO,oBAAoB,CAAC,CAAC,CAAC;EAClD,MAAM,CAACqB,CAAC,EAAEC,IAAI,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAChC,MAAM,CAAC8B,CAAC,EAAEC,IAAI,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAChC,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAACkC,SAAS,CAAC;EACvD,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;;EAG9D;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;IAAA;IACE;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAuB,OAAA;MAAAc,QAAA,gBACEd,OAAA;QAAAc,QAAA,GAAG,MAAI,EAACC,CAAC,GAAGA,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,UAAU;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1CpB,OAAA;QAAAc,QAAA,GAAG,MAAI,EAACO,CAAC,GAAGA,CAAC,CAACL,QAAQ,CAAC,CAAC,GAAG,UAAU;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC;;IAEL;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EAAA;AAEJ;AAAClB,EAAA,CAvFQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAyFZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}