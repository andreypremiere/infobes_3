{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0443\\u0447\\u0435\\u0431\\u0430\\\\3 \\u043A\\u0443\\u0440\\u0441\\\\1 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\\\u0418\\u043D\\u0444\\u043E\\u0411\\u0435\\u0437\\\\pracitce_3\\\\practice_3_ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/* global BigInt */\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { decryptMessage, encryptMessage } from \"./cryptoTools\";\nimport { generateRandomNumber, calculateNumberB, calculateNumberS, deriveKey, deriveKeyPythonCompatible } from \"./numberTools\";\nimport { getKeys, sendKeyB, getMessage, compareKeys, sendMessage } from \"./requests/requestExchangeKey\";\nimport { Registration } from \"./components/Registration/Registration\";\nimport { MainWindow } from \"./components/MainWindow/MainWindow\";\nimport { Note } from './components/MainWindow/Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [b, setb] = useState(null);\n  const [B, setB] = useState(null);\n  const [S, setS] = useState(null);\n  const [derivedKey, setDerivedKey] = useState(undefined);\n  const [decryptedMessage, setDecryptedMessage] = useState(null);\n\n  // Получение ключей от сервера при монтировании компонента\n  useEffect(() => {\n    const fetchData = async () => {\n      // console.log(`сгенерированное число b: ${b}`);\n\n      setb(generateRandomNumber());\n      const keys = await getKeys(); // Получение данных с сервера\n      // console.log(`Полученное число A: ${keys.key_A}`);\n\n      const B_loc = calculateNumberB(keys.key_g, b, keys.key_p);\n      setB(B_loc);\n      // console.log(`Число B: ${B_loc}`);\n\n      sendKeyB(B_loc);\n      const S_local = calculateNumberS(keys.key_A, b, keys.key_p);\n      setS(S_local);\n      // console.log(`S: ${S_local}`)\n\n      // function uint8ArrayToHex(uint8Array) {\n      //   return Array.from(uint8Array)\n      //       .map(byte => byte.toString(16).padStart(2, '0')) // Преобразуем каждый байт в шестнадцатеричное значение\n      //       .join(''); \n      // }    \n\n      const derivedKey = await deriveKey(S_local); // Генерация ключа\n      setDerivedKey(derivedKey);\n      // console.log(`derivedKey: ${uint8ArrayToHex(derivedKey)}`)\n\n      // await compareKeys(derivedKey)\n      // const data = await getMessage();\n      // console.log(`iv: ${data.iv}`)\n      // console.log(`iv: ${typeof data.iv}`)\n\n      // console.log(`encrypted_message: ${data.encrypted_message}`)\n      // console.log(`encrypted_message: ${typeof data.encrypted_message}`)\n\n      // const decryptedMessage = decryptMessage(data.iv, data.encrypted_message, derivedKey)\n      // console.log(decryptedMessage)\n\n      // const dataForChipher = {'one': 'hello', 'two': [32, 28]}\n      // const dataIvAndMessage = encryptMessage(derivedKey, dataForChipher)\n      // console.log(`iv: ${dataIvAndMessage.iv}`)\n      // console.log(`mes: ${dataIvAndMessage.encryptedMessage}`)\n\n      // sendMessage(dataIvAndMessage.iv, dataIvAndMessage.encryptedMessage);\n    };\n    fetchData();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <Registration sharedKey={derivedKey}></Registration>\n    // <MainWindow sharedKey={derivedKey}></MainWindow>\n    _jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Registration, {\n            sharedKey: derivedKey\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/working\",\n          element: /*#__PURE__*/_jsxDEV(MainWindow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/working/:id\",\n          element: /*#__PURE__*/_jsxDEV(Note, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)\n\n    // <Router>\n    //     <Routes>\n    //         {/* Маршрут для начального компонента */}\n    //         <Route path=\"/\" element={<Registration sharedKey={derivedKey}></Registration>} />\n\n    //         {/* Маршрут для целевого компонента */}\n    //         <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n    //     </Routes>\n    // </Router>\n  );\n}\n_s(App, \"ygUfwijZ1J+7KpDfQXAWgsAWcnI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Routes","Route","decryptMessage","encryptMessage","generateRandomNumber","calculateNumberB","calculateNumberS","deriveKey","deriveKeyPythonCompatible","getKeys","sendKeyB","getMessage","compareKeys","sendMessage","Registration","MainWindow","Note","jsxDEV","_jsxDEV","App","_s","b","setb","B","setB","S","setS","derivedKey","setDerivedKey","undefined","decryptedMessage","setDecryptedMessage","fetchData","keys","B_loc","key_g","key_p","S_local","key_A","children","path","element","sharedKey","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/App.js"],"sourcesContent":["/* global BigInt */\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { decryptMessage, encryptMessage } from \"./cryptoTools\";\nimport {\n  generateRandomNumber,\n  calculateNumberB,\n  calculateNumberS,\n  deriveKey,\n  deriveKeyPythonCompatible\n} from \"./numberTools\";\nimport { getKeys, sendKeyB, getMessage, compareKeys, sendMessage } from \"./requests/requestExchangeKey\";\nimport { Registration } from \"./components/Registration/Registration\";\nimport { MainWindow } from \"./components/MainWindow/MainWindow\";\nimport { Note } from './components/MainWindow/Note'\n\nfunction App() {\n  const [b, setb] = useState(null);\n  const [B, setB] = useState(null);\n  const [S, setS] = useState(null);\n  const [derivedKey, setDerivedKey] = useState(undefined);\n  const [decryptedMessage, setDecryptedMessage] = useState(null);\n\n\n  // Получение ключей от сервера при монтировании компонента\n  useEffect(() => {\n    const fetchData = async () => {\n      // console.log(`сгенерированное число b: ${b}`);\n\n      setb(generateRandomNumber())\n\n      const keys = await getKeys(); // Получение данных с сервера\n      // console.log(`Полученное число A: ${keys.key_A}`);\n      \n      const B_loc = calculateNumberB(keys.key_g, b, keys.key_p);\n      setB(B_loc);\n      // console.log(`Число B: ${B_loc}`);\n\n      sendKeyB(B_loc);\n\n      const S_local = calculateNumberS(keys.key_A, b, keys.key_p);\n      setS(S_local);\n      // console.log(`S: ${S_local}`)\n\n      // function uint8ArrayToHex(uint8Array) {\n      //   return Array.from(uint8Array)\n      //       .map(byte => byte.toString(16).padStart(2, '0')) // Преобразуем каждый байт в шестнадцатеричное значение\n      //       .join(''); \n      // }    \n\n      const derivedKey = await deriveKey(S_local); // Генерация ключа\n      setDerivedKey(derivedKey);\n      // console.log(`derivedKey: ${uint8ArrayToHex(derivedKey)}`)\n\n      // await compareKeys(derivedKey)\n      // const data = await getMessage();\n      // console.log(`iv: ${data.iv}`)\n      // console.log(`iv: ${typeof data.iv}`)\n\n      // console.log(`encrypted_message: ${data.encrypted_message}`)\n      // console.log(`encrypted_message: ${typeof data.encrypted_message}`)\n\n      // const decryptedMessage = decryptMessage(data.iv, data.encrypted_message, derivedKey)\n      // console.log(decryptedMessage)\n\n\n      // const dataForChipher = {'one': 'hello', 'two': [32, 28]}\n      // const dataIvAndMessage = encryptMessage(derivedKey, dataForChipher)\n      // console.log(`iv: ${dataIvAndMessage.iv}`)\n      // console.log(`mes: ${dataIvAndMessage.encryptedMessage}`)\n\n      // sendMessage(dataIvAndMessage.iv, dataIvAndMessage.encryptedMessage);\n\n  };\n\n  fetchData();\n\n  }, []); \n\n  return (\n    // <Registration sharedKey={derivedKey}></Registration>\n\n    // <MainWindow sharedKey={derivedKey}></MainWindow>\n    <Router>\n        <Routes>\n            <Route path='/' element={<Registration sharedKey={derivedKey}></Registration>} />\n            <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n            <Route path=\"/working/:id\" element={<Note></Note>} />\n        </Routes>\n    </Router>\n    \n    // <Router>\n    //     <Routes>\n    //         {/* Маршрут для начального компонента */}\n    //         <Route path=\"/\" element={<Registration sharedKey={derivedKey}></Registration>} />\n\n    //         {/* Маршрут для целевого компонента */}\n    //         <Route path=\"/working\" element={<MainWindow></MainWindow>} />\n    //     </Routes>\n    // </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}