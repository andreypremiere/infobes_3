{"ast":null,"code":"import CryptoJS from 'crypto-js';\nexport function encryptMessage(sharedKey, message) {\n  // Генерация IV\n  const iv = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Base64);\n  const ivWordArray = CryptoJS.enc.Base64.parse(iv);\n  sharedKey = CryptoJS.enc.Hex.stringify(sharedKey);\n  sharedKey = sharedKey.slice(0, 32).padEnd(16, \"0\");\n\n  // Шифрование\n  const encryptedMessage = CryptoJS.AES.encrypt(JSON.stringify(message),\n  // Преобразование в JSON\n  CryptoJS.enc.Utf8.parse(sharedKey), {\n    iv: ivWordArray,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  }).toString();\n  return {\n    iv: iv,\n    encryptedMessage: encryptedMessage\n  };\n}\n\n// Функция для расшифровки сообщения\nexport function decryptMessage(ivBase64, encryptedMessageBase64, sharedKey) {\n  const iv = CryptoJS.enc.Base64.parse(ivBase64);\n  const encryptedMessage = CryptoJS.enc.Base64.parse(encryptedMessageBase64);\n  const decrypted = CryptoJS.AES.decrypt({\n    ciphertext: encryptedMessage\n  }, sharedKey,\n  // Преобразуем sharedKey\n  {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\n  return JSON.parse(plaintext); // Предполагаем, что сообщение в формате JSON\n}","map":{"version":3,"names":["CryptoJS","encryptMessage","sharedKey","message","iv","lib","WordArray","random","toString","enc","Base64","ivWordArray","parse","Hex","stringify","slice","padEnd","encryptedMessage","AES","encrypt","JSON","Utf8","mode","CBC","padding","pad","Pkcs7","decryptMessage","ivBase64","encryptedMessageBase64","decrypted","decrypt","ciphertext","plaintext"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/cryptoTools.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nexport function encryptMessage(sharedKey, message) {\r\n     // Генерация IV\r\n     const iv = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Base64);\r\n     const ivWordArray = CryptoJS.enc.Base64.parse(iv);\r\n \r\n     sharedKey = CryptoJS.enc.Hex.stringify(sharedKey);\r\n     sharedKey = sharedKey.slice(0, 32).padEnd(16, \"0\");\r\n \r\n     // Шифрование\r\n     const encryptedMessage = CryptoJS.AES.encrypt(\r\n         JSON.stringify(message), // Преобразование в JSON\r\n         CryptoJS.enc.Utf8.parse(sharedKey),\r\n         {\r\n             iv: ivWordArray,\r\n             mode: CryptoJS.mode.CBC,\r\n             padding: CryptoJS.pad.Pkcs7,\r\n         }\r\n     ).toString();\r\n \r\n     return { iv: iv, encryptedMessage: encryptedMessage };\r\n }\r\n\r\n\r\n// Функция для расшифровки сообщения\r\nexport function decryptMessage(ivBase64, encryptedMessageBase64, sharedKey) {\r\n    const iv = CryptoJS.enc.Base64.parse(ivBase64);\r\n    const encryptedMessage = CryptoJS.enc.Base64.parse(encryptedMessageBase64);\r\n  \r\n    const decrypted = CryptoJS.AES.decrypt(\r\n      { ciphertext: encryptedMessage },\r\n      sharedKey, // Преобразуем sharedKey\r\n      {\r\n        iv: iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n      }\r\n    );\r\n  \r\n    const plaintext = decrypted.toString(CryptoJS.enc.Utf8);\r\n    return JSON.parse(plaintext); // Предполагаем, что сообщение в формате JSON\r\n  }\r\n\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAEhC,OAAO,SAASC,cAAcA,CAACC,SAAS,EAAEC,OAAO,EAAE;EAC9C;EACA,MAAMC,EAAE,GAAGJ,QAAQ,CAACK,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAACC,QAAQ,CAACR,QAAQ,CAACS,GAAG,CAACC,MAAM,CAAC;EAC1E,MAAMC,WAAW,GAAGX,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACE,KAAK,CAACR,EAAE,CAAC;EAEjDF,SAAS,GAAGF,QAAQ,CAACS,GAAG,CAACI,GAAG,CAACC,SAAS,CAACZ,SAAS,CAAC;EACjDA,SAAS,GAAGA,SAAS,CAACa,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC;;EAElD;EACA,MAAMC,gBAAgB,GAAGjB,QAAQ,CAACkB,GAAG,CAACC,OAAO,CACzCC,IAAI,CAACN,SAAS,CAACX,OAAO,CAAC;EAAE;EACzBH,QAAQ,CAACS,GAAG,CAACY,IAAI,CAACT,KAAK,CAACV,SAAS,CAAC,EAClC;IACIE,EAAE,EAAEO,WAAW;IACfW,IAAI,EAAEtB,QAAQ,CAACsB,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAExB,QAAQ,CAACyB,GAAG,CAACC;EAC1B,CACJ,CAAC,CAAClB,QAAQ,CAAC,CAAC;EAEZ,OAAO;IAAEJ,EAAE,EAAEA,EAAE;IAAEa,gBAAgB,EAAEA;EAAiB,CAAC;AACzD;;AAGD;AACA,OAAO,SAASU,cAAcA,CAACC,QAAQ,EAAEC,sBAAsB,EAAE3B,SAAS,EAAE;EACxE,MAAME,EAAE,GAAGJ,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACE,KAAK,CAACgB,QAAQ,CAAC;EAC9C,MAAMX,gBAAgB,GAAGjB,QAAQ,CAACS,GAAG,CAACC,MAAM,CAACE,KAAK,CAACiB,sBAAsB,CAAC;EAE1E,MAAMC,SAAS,GAAG9B,QAAQ,CAACkB,GAAG,CAACa,OAAO,CACpC;IAAEC,UAAU,EAAEf;EAAiB,CAAC,EAChCf,SAAS;EAAE;EACX;IACEE,EAAE,EAAEA,EAAE;IACNkB,IAAI,EAAEtB,QAAQ,CAACsB,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAExB,QAAQ,CAACyB,GAAG,CAACC;EACxB,CACF,CAAC;EAED,MAAMO,SAAS,GAAGH,SAAS,CAACtB,QAAQ,CAACR,QAAQ,CAACS,GAAG,CAACY,IAAI,CAAC;EACvD,OAAOD,IAAI,CAACR,KAAK,CAACqB,SAAS,CAAC,CAAC,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}