{"ast":null,"code":"import { encryptMessage, decryptMessage } from '../cryptoTools';\nexport async function requestRegistration(nickName, password, sharedKey) {\n  const dataForSending = {\n    'nickName': nickName,\n    'password': password\n  };\n  const encryptedMessage = encryptMessage(sharedKey, dataForSending);\n  const result = await fetch('http://localhost:3000/register_user', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  const responseData = await result.json();\n  const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage);\n  return decryptedData;\n}\n\n// export async function requestEnter(nickName, password, sharedKey) {\n//     const dataForSending = {'nickName': nickName, 'password': password}\n\n//     const encryptedMessage = encryptMessage(sharedKey, dataForSending)\n\n//     const result = await fetch('http://localhost:3000/register_user', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//             'iv': encryptedMessage.iv, \n//             'encryptedMessage': encryptedMessage.encryptedMessage\n//         }),\n//     })\n\n//     const responseData = await result.json();\n//     console.log(responseData)\n// }","map":{"version":3,"names":["encryptMessage","decryptMessage","requestRegistration","nickName","password","sharedKey","dataForSending","encryptedMessage","result","fetch","method","headers","body","JSON","stringify","iv","responseData","json","decryptedData"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/requests/requestRegister.js"],"sourcesContent":["import {encryptMessage, decryptMessage} from '../cryptoTools'\r\n\r\nexport async function requestRegistration(nickName, password, sharedKey) {\r\n    const dataForSending = {'nickName': nickName, 'password': password}\r\n\r\n    const encryptedMessage = encryptMessage(sharedKey, dataForSending)\r\n\r\n    const result = await fetch('http://localhost:3000/register_user', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    const responseData = await result.json();\r\n\r\n    const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage)\r\n    return decryptedData;\r\n}\r\n\r\n// export async function requestEnter(nickName, password, sharedKey) {\r\n//     const dataForSending = {'nickName': nickName, 'password': password}\r\n\r\n//     const encryptedMessage = encryptMessage(sharedKey, dataForSending)\r\n\r\n//     const result = await fetch('http://localhost:3000/register_user', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//             'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//             'iv': encryptedMessage.iv, \r\n//             'encryptedMessage': encryptedMessage.encryptedMessage\r\n//         }),\r\n//     })\r\n\r\n//     const responseData = await result.json();\r\n//     console.log(responseData)\r\n// }"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,cAAc,QAAO,gBAAgB;AAE7D,OAAO,eAAeC,mBAAmBA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAE;EACrE,MAAMC,cAAc,GAAG;IAAC,UAAU,EAAEH,QAAQ;IAAE,UAAU,EAAEC;EAAQ,CAAC;EAEnE,MAAMG,gBAAgB,GAAGP,cAAc,CAACK,SAAS,EAAEC,cAAc,CAAC;EAElE,MAAME,MAAM,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;IAC9DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjB,IAAI,EAAEP,gBAAgB,CAACQ,EAAE;MACzB,kBAAkB,EAAER,gBAAgB,CAACA;IACzC,CAAC;EACL,CAAC,CAAC;EAEF,MAAMS,YAAY,GAAG,MAAMR,MAAM,CAACS,IAAI,CAAC,CAAC;EAExC,MAAMC,aAAa,GAAGjB,cAAc,CAACe,YAAY,CAACD,EAAE,EAAEC,YAAY,CAACT,gBAAgB,CAAC;EACpF,OAAOW,aAAa;AACxB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}