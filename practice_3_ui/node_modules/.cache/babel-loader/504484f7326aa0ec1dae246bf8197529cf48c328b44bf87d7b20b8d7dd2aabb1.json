{"ast":null,"code":"import { decodeToken, getTokenFromCookie } from \"../JWTProvider\";\nimport { encryptMessage, decryptMessage } from \"../cryptoTools\";\nexport async function requestUpdateNote(data, sharedKey) {\n  const encryptedMessage = encryptMessage(sharedKey, data);\n  const result = await fetch('http://localhost:5000/update_note', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  if (result.status === 200) {\n    return true;\n  }\n  return false;\n}\nexport async function requestGetNotes(sharedKey) {\n  try {\n    let data_token = decodeToken(getTokenFromCookie());\n  } catch {}\n\n  // console.log('data_token', data_token)\n  let nickName = data_token.nickName;\n  let role = data_token.role;\n  const data = {\n    'nickName': nickName,\n    'role': role\n  };\n  const encryptedMessage = encryptMessage(sharedKey, data);\n  const result = await fetch('http://localhost:5000/get_user_notes', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  const responseData = await result.json();\n  const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage, sharedKey);\n  return decryptedData.notes;\n}\nexport async function requestAddNote(sendingData, sharedKey) {\n  const encryptedMessage = encryptMessage(sharedKey, sendingData);\n  console.log(sendingData);\n  const result = await fetch('http://localhost:5000/add_note', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  const responseData = await result.json();\n\n  // const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage, sharedKey)\n  // console.log(responseData)\n  return responseData;\n}\nexport async function requestDeleteNote(id, sharedKey) {\n  const encryptedMessage = encryptMessage(sharedKey, id);\n  const result = await fetch('http://localhost:5000/delete_note', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'iv': encryptedMessage.iv,\n      'encryptedMessage': encryptedMessage.encryptedMessage\n    })\n  });\n  const responseData = await result.json();\n\n  // const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage, sharedKey)\n  // console.log(responseData)\n  return responseData;\n}","map":{"version":3,"names":["decodeToken","getTokenFromCookie","encryptMessage","decryptMessage","requestUpdateNote","data","sharedKey","encryptedMessage","result","fetch","method","headers","body","JSON","stringify","iv","status","requestGetNotes","data_token","nickName","role","responseData","json","decryptedData","notes","requestAddNote","sendingData","console","log","requestDeleteNote","id"],"sources":["D:/учеба/3 курс/1 семестр/ИнфоБез/pracitce_3/practice_3_ui/src/requests/requestNotes.js"],"sourcesContent":["import { decodeToken, getTokenFromCookie } from \"../JWTProvider\"\r\nimport { encryptMessage, decryptMessage } from \"../cryptoTools\"\r\n\r\nexport async function requestUpdateNote(data, sharedKey) {\r\n\r\n    const encryptedMessage = encryptMessage(sharedKey, data)\r\n\r\n    const result = await fetch('http://localhost:5000/update_note', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    if (result.status === 200) {\r\n        return true\r\n    }\r\n    \r\n    return false\r\n}\r\n\r\nexport async function requestGetNotes(sharedKey) {\r\n    try {\r\n        let data_token = decodeToken(getTokenFromCookie())\r\n    }\r\n    catch {\r\n\r\n    }\r\n\r\n    // console.log('data_token', data_token)\r\n    let nickName = data_token.nickName\r\n    let role = data_token.role\r\n\r\n    const data = {'nickName': nickName, 'role': role}\r\n\r\n    const encryptedMessage = encryptMessage(sharedKey, data)\r\n\r\n    const result = await fetch('http://localhost:5000/get_user_notes', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    const responseData = await result.json();\r\n\r\n    const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage, sharedKey)\r\n\r\n    return decryptedData.notes\r\n}\r\n\r\nexport async function requestAddNote(sendingData, sharedKey) {\r\n\r\n    const encryptedMessage = encryptMessage(sharedKey, sendingData)\r\n    console.log(sendingData)\r\n\r\n    const result = await fetch('http://localhost:5000/add_note', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    const responseData = await result.json();\r\n\r\n    // const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage, sharedKey)\r\n    // console.log(responseData)\r\n    return responseData\r\n}\r\n\r\nexport async function requestDeleteNote(id, sharedKey) {\r\n    const encryptedMessage = encryptMessage(sharedKey, id)\r\n\r\n    const result = await fetch('http://localhost:5000/delete_note', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'iv': encryptedMessage.iv, \r\n            'encryptedMessage': encryptedMessage.encryptedMessage\r\n        }),\r\n    })\r\n\r\n    const responseData = await result.json();\r\n\r\n    // const decryptedData = decryptMessage(responseData.iv, responseData.encryptedMessage, sharedKey)\r\n    // console.log(responseData)\r\n    return responseData\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}